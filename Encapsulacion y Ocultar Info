Lenguaje C#


Encapsulacion

Acesso Publico

using System;

namespace RectangleApplication {
   class Rectangle {
      //member variables
      public double length;
      public double width;
      
      public double GetArea() {
         return length * width;
      }
      public void Display() {
         Console.WriteLine("Length: {0}", length);
         Console.WriteLine("Width: {0}", width);
         Console.WriteLine("Area: {0}", GetArea());
      }
   }//end class Rectangle
   
   class ExecuteRectangle {
      static void Main(string[] args) {
         Rectangle r = new Rectangle();
         r.length = 4.5;
         r.width = 3.5;
         r.Display();
         Console.ReadLine();
      }
   }
   
   Encapsulacion
   
   Acesso privado
   
   using System;

namespace RectangleApplication {
   class Rectangle {
      //member variables
      private double length;
      private double width;
      
      public void Acceptdetails() {
         Console.WriteLine("Enter Length: ");
         length = Convert.ToDouble(Console.ReadLine());
         Console.WriteLine("Enter Width: ");
         width = Convert.ToDouble(Console.ReadLine());
      }
      public double GetArea() {
         return length * width;
      }
      public void Display() {
         Console.WriteLine("Length: {0}", length);
         Console.WriteLine("Width: {0}", width);
         Console.WriteLine("Area: {0}", GetArea());
      }
   }//end class Rectangle
   
   class ExecuteRectangle {
      static void Main(string[] args) {
         Rectangle r = new Rectangle();
         r.Acceptdetails();
         r.Display();
         Console.ReadLine();
      }
   }
}

Metodo para ocultar informacion en C#

using System; 
  
// Base Class 
public class My_Family { 
  
    public void member() 
    { 
        Console.WriteLine("Total number of family members: 3"); 
    } 
} 
  
// Derived Class 
public class My_Member : My_Family { 
  
    // Reimplement the method of the base class 
    // Using new keyword 
    // It hides the method of the base class 
    public new void member()  
    { 
        Console.WriteLine("Name: Rakesh, Age: 40 \nName: Somya, "+ 
                               "Age: 39 \nName: Rohan, Age: 20 "); 
    } 
} 
  
// Driver Class 
class GFG { 
  
    // Main method 
    static public void Main() 
    { 
  
        // Creating the object of the derived class 
        My_Member obj = new My_Member(); 
  
        // Access the method of derived class 
        obj.member(); 
    } 
} 
